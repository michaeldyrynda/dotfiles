{
  "name": "vscode-tailwindcss",
  "displayName": "Tailwind CSS IntelliSense",
  "description": "Intelligent Tailwind CSS tooling for VS Code",
  "preview": true,
  "author": "Brad Cornes <hello@bradley.dev>",
  "license": "MIT",
  "version": "0.5.10",
  "homepage": "https://github.com/tailwindlabs/tailwindcss-intellisense",
  "bugs": {
    "url": "https://github.com/tailwindlabs/tailwindcss-intellisense/issues",
    "email": "hello@bradley.dev"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/tailwindlabs/tailwindcss-intellisense.git"
  },
  "publisher": "bradlc",
  "keywords": [
    "tailwind",
    "tailwindcss",
    "css",
    "intellisense",
    "autocomplete",
    "vscode"
  ],
  "engines": {
    "vscode": "^1.33.0"
  },
  "categories": [
    "Linters",
    "Other"
  ],
  "galleryBanner": {
    "color": "#f9fafb"
  },
  "icon": "media/icon.png",
  "activationEvents": [
    "workspaceContains:**/{tailwind,tailwind.config,tailwind-config,.tailwindrc}.{js,cjs}"
  ],
  "main": "dist/extension/index.js",
  "contributes": {
    "grammars": [
      {
        "scopeName": "tailwindcss.injection",
        "path": "./syntaxes/tailwind.tmLanguage.json",
        "injectTo": [
          "source.css",
          "source.css.scss",
          "source.css.less",
          "source.css.postcss",
          "source.vue",
          "source.svelte",
          "text.html"
        ]
      }
    ],
    "configuration": {
      "title": "Tailwind CSS IntelliSense",
      "properties": {
        "tailwindCSS.emmetCompletions": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Enable class name completions when using Emmet-style syntax, for example `div.bg-red-500.uppercase`"
        },
        "tailwindCSS.includeLanguages": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "default": {},
          "markdownDescription": "Enable features in languages that are not supported by default. Add a mapping here between the new language and an already supported language.\n E.g.: `{\"plaintext\": \"html\"}`"
        },
        "tailwindCSS.colorDecorators": {
          "type": "string",
          "enum": [
            "inherit",
            "on",
            "off"
          ],
          "markdownEnumDescriptions": [
            "Color decorators are rendered if `editor.colorDecorators` is enabled.",
            "Color decorators are rendered.",
            "Color decorators are not rendered."
          ],
          "default": "inherit",
          "markdownDescription": "Controls whether the editor should render inline color decorators for Tailwind CSS classes and helper functions.",
          "scope": "language-overridable"
        },
        "tailwindCSS.validate": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Enable linting. Rules can be configured individually using the `tailwindcss.lint.*` settings",
          "scope": "language-overridable"
        },
        "tailwindCSS.lint.cssConflict": {
          "type": "string",
          "enum": [
            "ignore",
            "warning",
            "error"
          ],
          "default": "warning",
          "markdownDescription": "Class names on the same HTML element which apply the same CSS property or properties",
          "scope": "language-overridable"
        },
        "tailwindCSS.lint.invalidApply": {
          "type": "string",
          "enum": [
            "ignore",
            "warning",
            "error"
          ],
          "default": "error",
          "markdownDescription": "Unsupported use of the [`@apply` directive](https://tailwindcss.com/docs/functions-and-directives/#apply)",
          "scope": "language-overridable"
        },
        "tailwindCSS.lint.invalidScreen": {
          "type": "string",
          "enum": [
            "ignore",
            "warning",
            "error"
          ],
          "default": "error",
          "markdownDescription": "Unknown screen name used with the [`@screen` directive](https://tailwindcss.com/docs/functions-and-directives/#screen)",
          "scope": "language-overridable"
        },
        "tailwindCSS.lint.invalidVariant": {
          "type": "string",
          "enum": [
            "ignore",
            "warning",
            "error"
          ],
          "default": "error",
          "markdownDescription": "Unknown variant name used with the [`@variants` directive](https://tailwindcss.com/docs/functions-and-directives/#variants)",
          "scope": "language-overridable"
        },
        "tailwindCSS.lint.invalidConfigPath": {
          "type": "string",
          "enum": [
            "ignore",
            "warning",
            "error"
          ],
          "default": "error",
          "markdownDescription": "Unknown or invalid path used with the [`theme` helper](https://tailwindcss.com/docs/functions-and-directives/#theme)",
          "scope": "language-overridable"
        },
        "tailwindCSS.lint.invalidTailwindDirective": {
          "type": "string",
          "enum": [
            "ignore",
            "warning",
            "error"
          ],
          "default": "error",
          "markdownDescription": "Unknown value used with the [`@tailwind` directive](https://tailwindcss.com/docs/functions-and-directives/#tailwind)",
          "scope": "language-overridable"
        },
        "tailwindCSS.experimental.classRegex": {
          "type": "array",
          "scope": "language-overridable"
        },
        "tailwindCSS.showPixelEquivalents": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Show `px` equivalents for `rem` CSS values."
        },
        "tailwindCSS.rootFontSize": {
          "type": "number",
          "default": 16,
          "markdownDescription": "Root font size in pixels. Used to convert `rem` CSS values to their `px` equivalents. See `#tailwindCSS.showPixelEquivalents#`."
        }
      }
    }
  },
  "scripts": {
    "dev": "glob-exec --foreach --parallel \"src/*.ts\" -- \"ncc build {{file}} --watch -o dist/{{file.toString().replace(/^src\\//, '').replace(/\\.ts$/, '')}}\"",
    "build": "glob-exec --foreach --parallel \"src/*.ts\" -- \"ncc build {{file}} -o dist/{{file.toString().replace(/^src\\//, '').replace(/\\.ts$/, '')}}\"",
    "minify": "glob-exec --foreach --parallel \"dist/**/*.js\" -- \"terser {{file}} --compress --mangle --output {{file.toString()}}\"",
    "package": "vsce package",
    "publish": "vsce publish",
    "vscode:prepublish": "npm run clean && npm run build && npm run minify",
    "clean": "rimraf dist",
    "test": "jest"
  },
  "dependencies": {
    "@types/debounce": "^1.2.0",
    "@types/mocha": "^5.2.0",
    "@types/node": "^13.9.3",
    "@types/vscode": "^1.32.0",
    "@zeit/ncc": "^0.22.0",
    "bufferutil": "^4.0.2",
    "callsite": "^1.0.0",
    "chokidar": "^3.3.1",
    "debounce": "^1.2.0",
    "dlv": "^1.1.3",
    "dset": "^2.0.1",
    "esm": "^3.2.25",
    "execa": "^3.4.0",
    "fast-glob": "^3.2.4",
    "find-up": "^5.0.0",
    "glob-exec": "^0.1.1",
    "import-from": "^3.0.0",
    "jest": "^25.5.4",
    "klona": "^2.0.4",
    "mitt": "^1.2.0",
    "normalize-path": "^3.0.0",
    "pkg-up": "^3.1.0",
    "postcss": "^7.0.27",
    "postcss-selector-parser": "^6.0.2",
    "resolve-from": "^5.0.0",
    "rimraf": "^3.0.2",
    "semver": "^7.3.2",
    "stack-trace": "0.0.10",
    "tailwindcss-language-service": "0.0.12",
    "terser": "^4.6.12",
    "tiny-invariant": "^1.1.0",
    "tslint": "^5.16.0",
    "typescript": "^3.8.3",
    "utf-8-validate": "^5.0.3",
    "vsce": "^1.76.1",
    "vscode-languageclient": "^6.1.3",
    "vscode-languageserver": "^6.1.1",
    "vscode-languageserver-textdocument": "^1.0.1",
    "vscode-uri": "^2.1.1"
  }
}
